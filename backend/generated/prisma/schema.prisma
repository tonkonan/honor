// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Определяем перечисления для ролей пользователей
enum UserRole {
  CITIZEN // Избиратель/Гражданин
  REPRESENTATIVE // Представитель власти
  ADMIN // Администратор
}

// Определяем перечисления для статусов задач
enum TaskStatus {
  PLANNED // Запланировано
  IN_PROGRESS // В процессе
  COMPLETED // Выполнено
  CANCELLED // Отменено
}

// Модель пользователя
model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  fullName   String
  role       UserRole @default(CITIZEN)
  avatarUrl  String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Отношения
  representative   Representative? // Один к одному с представителем
  tasksCreated     Task[]          @relation("TaskCreator")
  tasksAssigned    Task[]          @relation("TaskAssignee")
  posts            Post[]
  comments         Comment[]
  messages         Message[]       @relation("MessageSender")
  receivedMessages Message[]       @relation("MessageReceiver")
  notifications    Notification[]
  subscriptions    Subscription[]
  ratings          Rating[]        @relation("RatingCreator")
  receivedRatings  Rating[]        @relation("RatingReceiver")
}

// Модель представителя власти (расширяет пользователя)
model Representative {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  position    String
  bio         String?
  rating      Float     @default(0)
  ratingCount Int       @default(0)
  districtId  String?
  district    District? @relation(fields: [districtId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Модель округа
model District {
  id              String           @id @default(uuid())
  name            String
  description     String?
  geoData         String? // Хранение геоданных в формате JSON или GeoJSON
  representatives Representative[]
  tasks           Task[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  subscriptions   Subscription[]
}

// Модель задачи
model Task {
  id            String         @id @default(uuid())
  title         String
  description   String
  status        TaskStatus     @default(PLANNED)
  createdById   String
  createdBy     User           @relation("TaskCreator", fields: [createdById], references: [id])
  assignedToId  String?
  assignedTo    User?          @relation("TaskAssignee", fields: [assignedToId], references: [id])
  districtId    String?
  district      District?      @relation(fields: [districtId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  likes         Like[]
  history       TaskHistory[]
  subscriptions Subscription[]
}

// Модель истории задачи
model TaskHistory {
  id          String     @id @default(uuid())
  taskId      String
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status      TaskStatus
  comment     String?
  changedById String
  changedAt   DateTime   @default(now())
}

// Модель поста
model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  tags      Tag[]     @relation("PostToTag")
  mediaUrls String[]
}

// Модель комментария
model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]
}

// Модель лайка
model Like {
  id        String   @id @default(uuid())
  userId    String
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, taskId, postId, commentId])
}

// Модель сообщения
model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

// Модель уведомления
model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Модель подписки
model Subscription {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String // Тип подписки: "district", "task", "representative"
  districtId String?
  district   District? @relation(fields: [districtId], references: [id], onDelete: Cascade)
  taskId     String?
  task       Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())

  @@unique([userId, type, districtId, taskId])
}

// Модель тега
model Tag {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[] @relation("PostToTag")
}

// Модель рейтинга
model Rating {
  id         String   @id @default(uuid())
  value      Int
  comment    String?
  creatorId  String
  creator    User     @relation("RatingCreator", fields: [creatorId], references: [id])
  receiverId String
  receiver   User     @relation("RatingReceiver", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([creatorId, receiverId])
}
